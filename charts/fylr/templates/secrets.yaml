apiVersion: v1
kind: Secret
metadata:
  name: {{ include "fylr.secret.db.name" . }}
type: Opaque
stringData:
  {{ if (index .Values "postgresql-ha" "enabled") }}
  driver: "postgres"
  dsn: 'postgres://{{ index .Values "postgresql-ha" "postgresql" "username" }}:{{ index .Values "postgresql-ha" "postgresql" "password" }}@{{ .Release.Name }}-postgresql-ha-pgpool.{{ .Release.Namespace }}.svc:5432/{{ index .Values "postgresql-ha" "postgresql" "database" }}?sslmode=disable&application_name=fylr'
  {{ else }}
  driver: {{ .Values.fylr.db.driver | quote }}
  {{ $baseDSN := printf "postgres://%s:%s@%s:%v/%s?sslmode=%s&application_name=fylr" .Values.fylr.db.postgres.user .Values.fylr.db.postgres.password .Values.fylr.db.postgres.host .Values.fylr.db.postgres.port .Values.fylr.db.postgres.database .Values.fylr.db.postgres.sslmode }}
  # range options and append to baseDSN
  {{- range $key, $value := .Values.fylr.db.postgres.options }}
  {{- $baseDSN = printf "%s&%s=%s" $baseDSN $key $value }}
  {{- end }}
  dsn: {{ $baseDSN}}
  {{ end }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "fylr.secret.elastic.name" . }}
type: Opaque
stringData:
  {{ if .Values.elasticsearch.enabled }}
  username: ""
  password: ""
  hosts: '["http://{{ .Release.Name }}-elasticsearch.{{ .Release.Namespace }}.svc:9200"]'
  {{ else }}
  username: {{ .Values.fylr.elastic.username | quote }}
  password: {{ .Values.fylr.elastic.password | quote }}
  hosts: {{ .Values.fylr.elastic.hosts | toJson | quote }}
  {{ end }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "fylr.secret.s3.name" . }}
type: Opaque
stringData:
  {{ if .Values.minio.enabled }}
  CFG_FYLR_DB_INIT_LOCATIONS_S3_CONFIG_S3_ACCESSKEY: "{{ (index .Values.minio.users 0).accessKey }}"
  CFG_FYLR_DB_INIT_LOCATIONS_S3_CONFIG_S3_SECRETKEY: "{{ (index .Values.minio.users 0).secretKey }}"
  CFG_FYLR_DB_INIT_LOCATIONS_S3_CONFIG_S3_REGION: 'us-east-1'
  CFG_FYLR_DB_INIT_LOCATIONS_S3_CONFIG_S3_ENDPOINT: '{{ if eq (len .Values.minio.ingress.tls) 0 }}http{{ else }}https{{ end }}://{{ (index .Values.minio.ingress.hosts 0) }}'
  CFG_FYLR_DB_INIT_LOCATIONS_S3_CONFIG_S3_BUCKET: "{{ (index .Values.minio.buckets 0).name }}"
  CFG_FYLR_DB_INIT_LOCATIONS_S3_CONFIG_S3_SSL: "{{ if eq (len .Values.minio.ingress.tls) 0 }}off{{ else }}on{{ end }}"
  CFG_FYLR_DB_INIT_LOCATIONS_S3_KIND: "s3"
  CFG_FYLR_DB_INIT_LOCATIONS_S3_PREFIX: ""
  CFG_FYLR_DB_INIT_LOCATIONS_S3_ALLOW_PURGE: "true"
  {{ else }}
  {{- range $key, $value := .Values.fylr.db.init.locations }}
  CFG_FYLR_DB_INIT_LOCATIONS_{{ $value.name | upper }}_CONFIG_S3_ENDPOINT: {{ $value.config.s3.endpoint | quote }}
  CFG_FYLR_DB_INIT_LOCATIONS_{{ $value.name | upper }}_CONFIG_S3_ACCESSKEY: {{ $value.config.s3.accessKey | quote }}
  CFG_FYLR_DB_INIT_LOCATIONS_{{ $value.name | upper }}_CONFIG_S3_SECRETKEY: {{ $value.config.s3.secretKey | quote }}
  CFG_FYLR_DB_INIT_LOCATIONS_{{ $value.name | upper }}_CONFIG_S3_REGION: {{ $value.config.s3.region | quote }}
  CFG_FYLR_DB_INIT_LOCATIONS_{{ $value.name | upper }}_CONFIG_S3_BUCKET: {{ $value.config.s3.bucket | quote }}
  CFG_FYLR_DB_INIT_LOCATIONS_{{ $value.name | upper }}_CONFIG_S3_SSL: {{ if $value.config.s3.ssl }}"on"{{ else }}"off"{{ end }}
  CFG_FYLR_DB_INIT_LOCATIONS_{{ $value.name | upper }}_KIND: {{ print "s3" | quote }}
  CFG_FYLR_DB_INIT_LOCATIONS_{{ $value.name | upper }}_PREFIX: {{ $value.pathPrefix | quote }}
  CFG_FYLR_DB_INIT_LOCATIONS_{{ $value.name | upper }}_ALLOW_PURGE: {{ $value.allowPurge | quote }}
  {{- end }}
  {{ end }}
